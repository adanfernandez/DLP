/**
 * @generated VGen 1.3.3
 */

// package <nombre paquete>;

import ast.*;

/*
Plantilla para Visitors.
Para crear un nuevo Visitor cortar y pegar este código y ya se tendrá un visitor que compila y 
que al ejecutarlo recorrerá todo el árbol (sin hacer nada aún en él).
Solo quedará añadir a cada método visit aquello adicional que tenga que realizar sobre su nodo del AST.
*/

public class <nombre clase> extends DefaultVisitor {

	// ---------------------------------------------------------
	// Tareas a realizar en cada método visit:
	//
	// Si en algún método visit NO SE QUIERE HACER NADA más que recorrer los hijos entonces se puede 
	// borrar (dicho método se heredará de DefaultVisitor con el código de recorrido).
	//
	// Lo siguiente es para cuando se quiera AÑADIR alguna funcionalidad adicional a un visit:
	//
	// - El código que aparece en cada método visit es aquel que recorre los hijos. Es el mismo código
	//		que está implementado en el padre (DefaultVisitor). Por tanto la llamada a 'super.visit' y el
	//		resto del código del método hacen lo mismo (por ello 'super.visit' está comentado).
	//
	// - Lo HABITUAL será borrar todo el código de recorrido dejando solo la llamada a 'super.visit'. De esta
	//		manera cada método visit se puede centrar en la tarea que tiene que realizar sobre su nodo del AST.
	//
	// - La razón de que aparezca el código de recorrido de los hijos es por si se necesita realizar alguna
	//		tarea DURANTE el mismo (por ejemplo ir comprobando su tipo). En este caso ya se tiene implementado
	//		dicho recorrido y solo habrá que incrustar las acciones adicionales en el mismo. En este caso
	//		la llamada a 'super.visit' deberá ser borrada.
	// ---------------------------------------------------------


	//	class Programa { List<Definicion> definiciones; }
	public Object visit(Programa node, Object param) {

		// super.visit(node, param);

		if (node.getDefiniciones() != null)
			for (Definicion child : node.getDefiniciones())
				child.accept(this, param);

		return null;
	}

	//	class DefinicionVariable { String nombre;  Tipo tipo; }
	public Object visit(DefinicionVariable node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		return null;
	}

	//	class DefinicionFuncion { String nombre;  List<Parametro> parametros;  Tipo retorno;  List<DefinicionVariable> definiciones;  List<Sentencia> sentencias; }
	public Object visit(DefinicionFuncion node, Object param) {

		// super.visit(node, param);

		if (node.getParametros() != null)
			for (Parametro child : node.getParametros())
				child.accept(this, param);

		if (node.getRetorno() != null)
			node.getRetorno().accept(this, param);

		if (node.getDefiniciones() != null)
			for (DefinicionVariable child : node.getDefiniciones())
				child.accept(this, param);

		if (node.getSentencias() != null)
			for (Sentencia child : node.getSentencias())
				child.accept(this, param);

		return null;
	}

	//	class Parametro { String nombre;  Tipo tipo; }
	public Object visit(Parametro node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		return null;
	}

	//	class Print { Expresion expresion; }
	public Object visit(Print node, Object param) {

		// super.visit(node, param);

		if (node.getExpresion() != null)
			node.getExpresion().accept(this, param);

		return null;
	}

	//	class Printsp { Expresion expresion; }
	public Object visit(Printsp node, Object param) {

		// super.visit(node, param);

		if (node.getExpresion() != null)
			node.getExpresion().accept(this, param);

		return null;
	}

	//	class Read { Expresion expresion; }
	public Object visit(Read node, Object param) {

		// super.visit(node, param);

		if (node.getExpresion() != null)
			node.getExpresion().accept(this, param);

		return null;
	}

	//	class Asigna { Expresion left;  Expresion right; }
	public Object visit(Asigna node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class CondIf { Expresion condicion;  List<Sentencia> cuerpo;  CondElse condelse; }
	public Object visit(CondIf node, Object param) {

		// super.visit(node, param);

		if (node.getCondicion() != null)
			node.getCondicion().accept(this, param);

		if (node.getCuerpo() != null)
			for (Sentencia child : node.getCuerpo())
				child.accept(this, param);

		if (node.getCondelse() != null)
			node.getCondelse().accept(this, param);

		return null;
	}

	//	class CondElse { List<Sentencia> instrucciones; }
	public Object visit(CondElse node, Object param) {

		// super.visit(node, param);

		if (node.getInstrucciones() != null)
			for (Sentencia child : node.getInstrucciones())
				child.accept(this, param);

		return null;
	}

	//	class BucleWhile { Expresion condicion;  List<Sentencia> cuerpo; }
	public Object visit(BucleWhile node, Object param) {

		// super.visit(node, param);

		if (node.getCondicion() != null)
			node.getCondicion().accept(this, param);

		if (node.getCuerpo() != null)
			for (Sentencia child : node.getCuerpo())
				child.accept(this, param);

		return null;
	}

	//	class Return { Expresion devolucion; }
	public Object visit(Return node, Object param) {

		// super.visit(node, param);

		if (node.getDevolucion() != null)
			node.getDevolucion().accept(this, param);

		return null;
	}

	//	class IntType {  }
	public Object visit(IntType node, Object param) {
		return null;
	}

	//	class FloatType {  }
	public Object visit(FloatType node, Object param) {
		return null;
	}

	//	class CharType {  }
	public Object visit(CharType node, Object param) {
		return null;
	}

	//	class IdentType { Ident ident; }
	public Object visit(IdentType node, Object param) {

		// super.visit(node, param);

		if (node.getIdent() != null)
			node.getIdent().accept(this, param);

		return null;
	}

	//	class Array { Expresion dimension;  Tipo retorno; }
	public Object visit(Array node, Object param) {

		// super.visit(node, param);

		if (node.getDimension() != null)
			node.getDimension().accept(this, param);

		if (node.getRetorno() != null)
			node.getRetorno().accept(this, param);

		return null;
	}

	//	class NoRetorno {  }
	public Object visit(NoRetorno node, Object param) {
		return null;
	}

	//	class DefinicionEstructura { String nombre;  List<VariableEstructura> variablesEstructura; }
	public Object visit(DefinicionEstructura node, Object param) {

		// super.visit(node, param);

		if (node.getVariablesEstructura() != null)
			for (VariableEstructura child : node.getVariablesEstructura())
				child.accept(this, param);

		return null;
	}

	//	class VariableEstructura { String nombre;  Tipo tipo; }
	public Object visit(VariableEstructura node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		return null;
	}

	//	class Operador { Expresion left;  String operador;  Expresion right; }
	public Object visit(Operador node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class Asignacion { Expresion left;  Expresion right; }
	public Object visit(Asignacion node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class Comparacion { Expresion left;  String operador;  Expresion right; }
	public Object visit(Comparacion node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class Vacio {  }
	public Object visit(Vacio node, Object param) {
		return null;
	}

	//	class LiteralInt { String valor; }
	public Object visit(LiteralInt node, Object param) {
		return null;
	}

	//	class LiteralReal { String valor; }
	public Object visit(LiteralReal node, Object param) {
		return null;
	}

	//	class CteChar { String valor; }
	public Object visit(CteChar node, Object param) {
		return null;
	}

	//	class Ident { String valor; }
	public Object visit(Ident node, Object param) {
		return null;
	}

	//	class Cast { Tipo tipo;  Expresion expr; }
	public Object visit(Cast node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		if (node.getExpr() != null)
			node.getExpr().accept(this, param);

		return null;
	}

	//	class InvocarFuncion { Ident nombre;  List<Expresion> parametros; }
	public Object visit(InvocarFuncion node, Object param) {

		// super.visit(node, param);

		if (node.getNombre() != null)
			node.getNombre().accept(this, param);

		if (node.getParametros() != null)
			for (Expresion child : node.getParametros())
				child.accept(this, param);

		return null;
	}
}
